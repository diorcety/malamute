/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

#include "qmalamute.h"

///
//  Copy-construct to return the proper wrapped c types
QMlmProto::QMlmProto (mlm_proto_t *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = self;
}


///
//  Create a new empty mlm_proto
QMlmProto::QMlmProto (QObject *qObjParent) : QObject (qObjParent)
{
    this->self = mlm_proto_new ();
}

///
//  Create a new mlm_proto from zpl/zconfig_t *
QMlmProto* QMlmProto::newZpl (QZconfig *config, QObject *qObjParent)
{
    return new QMlmProto (mlm_proto_new_zpl (config->self), qObjParent);
}

///
//  Destroy a mlm_proto instance
QMlmProto::~QMlmProto ()
{
    mlm_proto_destroy (&self);
}

///
//  Create a deep copy of a mlm_proto instance
QMlmProto * QMlmProto::dup ()
{
    QMlmProto *rv = new QMlmProto (mlm_proto_dup (self));
    return rv;
}

///
//  Receive a mlm_proto from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.
int QMlmProto::recv (QZsock *input)
{
    int rv = mlm_proto_recv (self, input->self);
    return rv;
}

///
//  Send the mlm_proto to the output socket, does not destroy it
int QMlmProto::send (QZsock *output)
{
    int rv = mlm_proto_send (self, output->self);
    return rv;
}

///
//  Print contents of message to stdout
void QMlmProto::print ()
{
    mlm_proto_print (self);

}

///
//  Export class as zconfig_t*. Caller is responsibe for destroying the instance
QZconfig * QMlmProto::zpl (QZconfig *parent)
{
    QZconfig *rv = new QZconfig (mlm_proto_zpl (self, parent->self));
    return rv;
}

///
//  Get the message routing id, as a frame
QZframe * QMlmProto::routingId ()
{
    QZframe *rv = new QZframe (mlm_proto_routing_id (self));
    return rv;
}

///
//  Set the message routing id from a frame
void QMlmProto::setRoutingId (QZframe *routingId)
{
    mlm_proto_set_routing_id (self, routingId->self);

}

///
//  Get the mlm_proto message id
int QMlmProto::id ()
{
    int rv = mlm_proto_id (self);
    return rv;
}

///
//  Set the mlm_proto message id
void QMlmProto::setId (int id)
{
    mlm_proto_set_id (self, id);

}

///
//  Get the mlm_proto message id as printable text
const QString QMlmProto::command ()
{
    const QString rv = QString (mlm_proto_command (self));
    return rv;
}

///
//  Get the address field
const QString QMlmProto::address ()
{
    const QString rv = QString (mlm_proto_address (self));
    return rv;
}

///
//  Set the address field
void QMlmProto::setAddress (const QString &address)
{
    mlm_proto_set_address (self, address.toUtf8().data());

}

///
//  Get the stream field
const QString QMlmProto::stream ()
{
    const QString rv = QString (mlm_proto_stream (self));
    return rv;
}

///
//  Set the stream field
void QMlmProto::setStream (const QString &stream)
{
    mlm_proto_set_stream (self, stream.toUtf8().data());

}

///
//  Get the pattern field
const QString QMlmProto::pattern ()
{
    const QString rv = QString (mlm_proto_pattern (self));
    return rv;
}

///
//  Set the pattern field
void QMlmProto::setPattern (const QString &pattern)
{
    mlm_proto_set_pattern (self, pattern.toUtf8().data());

}

///
//  Get the subject field
const QString QMlmProto::subject ()
{
    const QString rv = QString (mlm_proto_subject (self));
    return rv;
}

///
//  Set the subject field
void QMlmProto::setSubject (const QString &subject)
{
    mlm_proto_set_subject (self, subject.toUtf8().data());

}

///
//  Get a copy of the content field
QZmsg * QMlmProto::content ()
{
    QZmsg *rv = new QZmsg (mlm_proto_content (self));
    return rv;
}

///
//  Get the content field and transfer ownership to caller
QZmsg * QMlmProto::getContent ()
{
    QZmsg *rv = new QZmsg (mlm_proto_get_content (self));
    return rv;
}

///
//
void QMlmProto::setContent (QZmsg *contentP)
{
    mlm_proto_set_content (self, &contentP->self);

}

///
//  Get the sender field
const QString QMlmProto::sender ()
{
    const QString rv = QString (mlm_proto_sender (self));
    return rv;
}

///
//  Set the sender field
void QMlmProto::setSender (const QString &sender)
{
    mlm_proto_set_sender (self, sender.toUtf8().data());

}

///
//  Get the tracker field
const QString QMlmProto::tracker ()
{
    const QString rv = QString (mlm_proto_tracker (self));
    return rv;
}

///
//  Set the tracker field
void QMlmProto::setTracker (const QString &tracker)
{
    mlm_proto_set_tracker (self, tracker.toUtf8().data());

}

///
//  Get the timeout field
quint32 QMlmProto::timeout ()
{
    uint32_t rv = mlm_proto_timeout (self);
    return rv;
}

///
//  Set the timeout field
void QMlmProto::setTimeout (quint32 timeout)
{
    mlm_proto_set_timeout (self, (uint32_t) timeout);

}

///
//  Get the status_code field
quint16 QMlmProto::statusCode ()
{
    uint16_t rv = mlm_proto_status_code (self);
    return rv;
}

///
//  Set the status_code field
void QMlmProto::setStatusCode (quint16 statusCode)
{
    mlm_proto_set_status_code (self, (uint16_t) statusCode);

}

///
//  Get the status_reason field
const QString QMlmProto::statusReason ()
{
    const QString rv = QString (mlm_proto_status_reason (self));
    return rv;
}

///
//  Set the status_reason field
void QMlmProto::setStatusReason (const QString &statusReason)
{
    mlm_proto_set_status_reason (self, statusReason.toUtf8().data());

}

///
//  Get the amount field
quint16 QMlmProto::amount ()
{
    uint16_t rv = mlm_proto_amount (self);
    return rv;
}

///
//  Set the amount field
void QMlmProto::setAmount (quint16 amount)
{
    mlm_proto_set_amount (self, (uint16_t) amount);

}

///
//  Self test of this class.
void QMlmProto::test (bool verbose)
{
    mlm_proto_test (verbose);

}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
